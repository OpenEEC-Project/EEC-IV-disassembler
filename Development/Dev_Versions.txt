


4.0.7.1  (22 June 2020)

Complete rework of internal bank structure layout.

1. Fixed display of RAM addresses in multibanks to correctly show bank.
2. Fixed bank location error with 'short bank' file layouts (e.g. RZAS range)
3. Improved bank location to handle more .bin file layout problems automatically.
3. Added support for later "StepD" 8065 with extra address mode.
4. Widened allowed address range in each bank to support specialist chips.
4. Reworked pseudo code for contional jumps for Carry (JC/JNC),  Overflow (JV/JNV)
  
NB. overflow (JV/JNV) is still probably wrong pseudeo code for some cases - awaiting more feedback.

4.0.6 released as stable (was 4.0.6P)


4.0.7.2 (11 August 2020)

1.  Fixed incorrect processing of bin file with 2 x bank 8.  (I think this is a special homemade 'stock' vs 'tuned' single bank)
2.  Fixed rbase showing bank 8 in some multibank cases (should be bank 1)
3.  Automatically set later 8065 type upon detection, as well as the setting in setopts

4.  Fix regressions after address changes in 4.0.7.1 
4a.  R100, R200, R300 are all zero registers as well as R0.
4b.  Multibank inconsistent address print. Anything < 0x400 has no bank (It's a CPU register), everything else has a bank no.
4c.  Rambank not always setting the following registers correctly.
4d.  Subroutine argument sizes lost (but still doesn't work for all cases, as before)
4e.  For an rbase op e.g. 'ad2w  R1e,Rf2' where rf2 is a register base show as immediate in pseudocode 'R1e = R1e + 8e5a'
4f.  Vector list display not displaying data words correctly. (Yes, some bins DO have data in the call list)

5.  Convert indexed references to a register to show as direct register (eg. R46 = [R0+345]; becomes  R46 = R345;) 
6.  Fix display problem with subroutine arguments in compact print mode not showing argument data.
7.  Fix problem with setopts not applying some options correctly. 
8.  New rules for bit flag names makes for better print result.
9.  Add setopts options for - "cptargs" = set default to compact subroutine argument print , "dataxtnd" = set default to extended data structure print
10. Fix problem with comments not always appearing correctly in extended data print
11. Change option 'X' (flip between hex and decimal) to more consistent  "print radiX"  as 'X n' where n is 2, 10 or 16 (binary, decimal, hex) 
12. Fix problem when subroutine declared by user and arguments then not calculated correctly. 


4.0.7.3 (18 Aug 2020)

1. Fixed  Incorrect print of Signed byte in HEX or BIN modes in struct printouts.
2. Fixed  Fail to pick up sym name in some indirect ops 
3. Fixed  Fails to identify some accessed data in listing. (did show as default = '??')
4. Fixed  Defining a subroutine (i.e. SUB xxxx in DIR file) can stop some code being correctly identified.
5. Fixed  SAD does not correctly check data overlap with args command - can lead to incorrect args printout.
6. Revert some 'auto-bits' rules for some bitwise operands - was too wide. User options 'F' and 'N' with SYM commands covers these. 
7. Revert to 'short form' operands as in "A += B" style. Did cause problem in 'if ( )' prints

4.0.7.4 (8 Sept 2020)

1. Fixed   - incorrect auto assignment and subsequent print of rbase registers.
2. Fixed   - display of 'Bx_RN' style prints with an3b
3. Added   - alignment of comments with structure of differing size lines (e.g. with '|' instead of ':') 
4. Added   - simple wrap check for comments, will wrap whole word from nearest space. 
5. Changed - an3b and an3w will now spread bit names over multiple lines for clearer display.
6. Added   - Support for split comments using "\|" to match multiple line opcodes (an3b, orb, etc) (in 5. above)
7. Restore - extra checks for data and code 'holes' (removed for testing, and not put back properly in .3)

4.0.7.6 (13 Sept 2020)

1. Fixed   - possible crash with long symbol names.
2. Fixed   - "}" Brackets in wrong place with bit names
3. Fixed   - Split comments not handled correctly with an3b, an3w
4. Fixed   - Split comments wrongly adds extra spaces if "\|" sequence is at end of comment
5. Changed - Symbol Names can now be up to 96 characters.

4.0.7.7 (11 Oct 2020)

Fixed    - Extra spaces printed in some comment lines.
Fixed    - Extra quotes in name and leading spaces after a quote confuses command processing
Fixed    - Faulty printout of bitwise code for some AD3W opcodes (when they should be ADD) 
Fixed    - Overlap of some functions and tables not detected, leading to faulty printout
Fixed    - Incorrect bank calculated for some opcodes, leading to wrong or missing symbols (Multibanks)
Improved - Sizes of subroutine arguments better (i.e. word or byte) after bugs found. Still not perfect.
Added    - better detection of single 'fill' bytes, now printed as 'fill' instead of '???'


4.0.7.8 (28 Oct 2020)

Fixed -  Missing symbols when processed in 'not SYM' commands (i.e. WORD 3234 3235 "MyName" not handled correctly, but SYM 3234 "MyName" was).
         May still be incorrect for multibank argument symbols.

NB. This is an interim release - made some big internal changes to code, which should not be visible to users (I hope !). 
Trying to improve subroutine arguments, for recognition of size, symbols and other features (encoded works, but not always, offsets do not).

4.0.7.9 (4 Dec 2020)

Fixed - Bank detect not picking up banks correctly in some binaries - changed detect algorithm
Changed internal bank handling so that addresses without bank can be recognised, so symbol names are better resolved for subroutine arguments. 

4.0.7.10 (12 Dec 2020)

Fixed - Possible crash with corrupt or non-806x binaries.
Fixed - 'catch22' where non-detect of banks could not be overriden with user commands.  More error checks added here too.
Fixed - Incorrect bank processing for sym names in multibanks.

Changed - default to adding bank 1 in multibanks for addresses with no bank.  (NB. This cannot work in all cases, only where use is obviously an address)

4.0.7.11 (21 Dec 2020)

Fixed - Comments get pushed up to start of bank (multibanks only).
Fixed - Bit-wise opcodes not displaying symbols above bit 7 for CLRW (incorrectly set as byte)
Fixed - 'W' flag with symbols not working if set in upper byte.
Fixed - According to Ford manuals, the 'odd address' word mode for 8065 CPU does not apply for registers below R20.
Fixed - internal change to ranges indexing for symbols and rbases, it was possible to 'lose' a symbol entirely.



  

